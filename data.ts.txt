import { Component, OnInit } from "@angular/core";
import { AdminRequestApi, Category } from "app/shared/sdk";
import { StorageService } from "app/core/services/storage.service";
import { FilterService } from "app/core/services/filter.service";
import { ToastService } from "app/core/services/toast.service";
import { NgxSpinnerService } from "ngx-spinner";
import { Events } from "app/core/services/events";
import { ActivatedRoute, Router } from "@angular/router";
import { DataAnalysisService } from "../data-analysis.service";

import * as _ from "lodash";
import { SDKService } from "app/_services/sdk";

@Component({
  selector: "app-data-analysis",
  templateUrl: "./data-analysis.component.html",
  styleUrls: ["./data-analysis.component.scss"],
})
export class DataAnalysisComponent implements OnInit {
  userAllStores = [];
  initFilter = false;
  storeId = "";
  selectedStores = [];
  storesAnalytics = [];
  allStoresAnalytics = [];
  categoriesGroupBy = [];
  totalCategoryGroupBy = [];
  options = {
    storesFilter: true,
    dateFilter: true,
  };
  loadingDashboardStat = false;
  dashboardStat: any = {};
  showValue = true;
  lineChartData: any;
  lastSelectedStat = "values";
  showAllStores: boolean = false;
  allStoreData: any;

  constructor(
    private storageService: StorageService,
    public sdkService: SDKService,
    private filterService: FilterService,
    private activatedRoute: ActivatedRoute,
    private toastService: ToastService,
    private spinnerService: NgxSpinnerService,
    private dataAnalysisService: DataAnalysisService,
    private router: Router,
    private events: Events
  ) {
    events.publish("pageChanged", ["REDUCTIONS DATA"]);

    this.selectedStores = this.filterService.selectedStores;
    this.userAllStores =
      this.storageService.get(this.storageService.keys.usersStores) || [];
    if (this.storageService.get(this.storageService.keys.usersStores)) {
      this.initFilter = true;
      this.selectedStores = this.filterService.selectedStores;
      if (this.selectedStores.length > 0) {
      }
    }
    this.events.subscribe("init", (data) => {
      this.initFilter = true;
      this.selectedStores = this.filterService.selectedStores;
      this.userAllStores = data;
      this.loadData();
    });
  }

  ngOnInit() {
    this.activatedRoute.params.subscribe((res) => {
      let storeId = res["storeId"];
      if (storeId) {
        this.storeId = storeId;
        if (!this.storesAnalytics.length) {
          this.loadData();
        } else {
          this.formatStoreAnalytics();
        }
      } else {
        if (this.selectedStores.length) {
          this.router.navigate([
            "dashboard",
            "analysis",
            this.selectedStores[0].id,
          ]);
        }
      }
    });
  }

  resetCategories(category){

    console.log('reseting')
    category.forEach(cat =>{
      cat['averageDiscount'] = 0;
      cat['averageReductionRequiredToSell'] = 0;
      cat['clientWastedPrice'] = 0;
      cat['marginLoss'] = 0;
      cat['quantityListed'] = 0;
      cat['reductionSoldQty'] = 0;
      cat['saleLoss'] += 0;
      cat['saleValueOfWastage'] = 0;
      cat['salesValue'] = 0;
      cat['sellThrough'] = 0;
      cat['valueListed'] = 0;
      cat['wastageQtyWaste'] = 0;
    })
  }

  formatStoreAnalytics() {


    if(this.storeId === '0'){

      this.showAllStores = true;
      this.allStoreData = undefined;

      let allStoresCategories = [];

      console.log(allStoresCategories)
      if(allStoresCategories.length > 0){
        this.resetCategories(allStoresCategories);
      }
      

      this.allStoresAnalytics.forEach(store =>{
        store.storeStat.categoriesGroupBy.forEach(category =>{

          let findByCategory = allStoresCategories.find(x=>x.category === category.category);
          if(findByCategory){
            
            findByCategory['averageDiscount'] += category['averageDiscount'];
            findByCategory['averageReductionRequiredToSell'] += category['averageReductionRequiredToSell'];
            findByCategory['clientWastedPrice'] += category['clientWastedPrice'];
            findByCategory['marginLoss'] += category['marginLoss'];
            findByCategory['quantityListed'] += category['quantityListed'];
            findByCategory['reductionSoldQty'] += category['reductionSoldQty'];
            findByCategory['saleLoss'] += category['saleLoss'];
            findByCategory['saleValueOfWastage'] += category['saleValueOfWastage'];
            findByCategory['salesValue'] += category['salesValue'];
            findByCategory['sellThrough'] += category['sellThrough'];
            findByCategory['valueListed'] += category['valueListed'];
            findByCategory['wastageQtyWaste'] += category['wastageQtyWaste'];
          }else{
            
            allStoresCategories.push(category);
          }

        });

        this.allStoreData = allStoresCategories;
        
        
      })


    }else{

      this.showAllStores = false;
      let selectedStore = _.find(this.storesAnalytics, { storeId: this.storeId });
      if (selectedStore) {
        
        this.categoriesGroupBy = _.sortBy(
          selectedStore.storeStat.categoriesGroupBy,
          "category"
        );

        
      }

    }

    

    
  }

  loadData() {
    this.lineChartData = undefined;
    this.loadingDashboardStat = true;
    this.selectedStores = this.filterService.selectedStores;
    let filter: any = this.filterService.getFilters();
    // this.events.publish('load-data', filter);
    this.serachCategoriesData(filter);
    this.getDashboardStoresAnalyticsData(filter);
    this.adminChartStoresAnalytics(filter);
  }

  adminChartStoresAnalytics(filter) {
    this.sdkService.adminChartStoresAnalytics(filter).subscribe((data) => {
      this.lineChartData = data;
    });
  }

  serachCategoriesData(filter) {
    this.spinnerService.show();
    this.dataAnalysisService.adminGetStoresAnalytics(filter).subscribe(
      (response) => {
        this.storesAnalytics = response.result;
        this.allStoresAnalytics = response.result;
        this.formatStoreAnalytics();
        //this.totalCategoryGroupBy = response.totalCategoryGroup;
        //this.categoriesGroupBy = response.totalCategoryGroup;
        this.spinnerService.hide();
      },
      (err) => {
        this.spinnerService.hide();
      }
    );
  }

  toggleStats(selected) {
    if (this.lastSelectedStat === selected) {
      return;
    } else {
      this.lastSelectedStat = selected;
      this.showValue = !this.showValue;
      this.events.publish("switchStatistic", selected);
    }
  }

  getDashboardStoresAnalyticsData(filter) {
    this.dataAnalysisService
      .getDashboardStoreAnalytics(filter)
      .subscribe((data) => {
        this.dashboardStat = {
          values: data.summary,
          units: data.units,
        };
        this.loadingDashboardStat = false;
      });
  }
}
